" vim-plug configuration
" https://github.com/junegunn/vim-plug
call plug#begin('~/.vim/plugged')

""" Improved Vim behaviors
" Sensible defaults for Vim
Plug 'tpope/vim-sensible'
" Configure vim based on the project
Plug 'editorconfig/editorconfig-vim'
" Guess indentation from current buffer
Plug 'tpope/vim-sleuth'
" sensible buffer close
Plug 'qpkorr/vim-bufkill'
" improved status line
Plug 'vim-airline/vim-airline'
" commenting
Plug 'scrooloose/nerdcommenter'
" Distraction free mode
Plug 'junegunn/goyo.vim'
" Navigation helpers
Plug 'tpope/vim-unimpaired'
" Text insertion surrounding words
Plug 'tpope/vim-surround'
" Better incremental search
Plug 'haya14busa/incsearch.vim'

" syntax highlighting
Plug 'kujenga/vim-monokai'

""" Additional UI Capabilities
" git wrapper
Plug 'tpope/vim-fugitive'
" Helper for GitHub
Plug 'tpope/vim-rhubarb'
" fuzzy finder
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" tree view of files, with git status
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on':  'NERDTreeToggle' }

" Language server support
Plug 'neoclide/coc.nvim', {'branch': 'release'}

""" Language Syntax Support
" Go language support
Plug 'fatih/vim-go' ", { 'do': ':GoUpdateBinaries' }
Plug 'sebdah/vim-delve'
" Python support
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'} " requirements files
Plug 'psf/black', { 'for': 'python' } " formatting
" Docker support
Plug 'moby/moby' , { 'rtp': '/contrib/syntax/vim/' }
" Javascript support
Plug 'pangloss/vim-javascript'
" JSX support
Plug 'mxw/vim-jsx'
" JSON support
Plug 'elzr/vim-json', { 'for': 'json' }
" jsonnet support
Plug 'google/vim-jsonnet', { 'for': 'jsonnet' }
" Rust support
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
" HTML support
Plug 'mattn/emmet-vim', { 'for': 'html' }
" Apiary support
Plug 'kylef/apiblueprint.vim', { 'for': 'apiblueprint' }
" TOML support
Plug 'cespare/vim-toml', { 'for': 'toml' }
" Caddyfile support
Plug 'isobit/vim-caddyfile'
" Pug template language
Plug 'digitaltoad/vim-pug'
" Hashicorp HCL
Plug 'b4b4r07/vim-hcl'
" Hashicorp Terraform
Plug 'hashivim/vim-terraform'
" Template highlighting
Plug 'mustache/vim-mustache-handlebars'
" Ethereum Solidity
Plug 'tomlion/vim-solidity'
" Swift
Plug 'keith/swift.vim'
" Powershell
Plug 'PProvost/vim-ps1'
" Cap'N Proto
Plug 'cstrahan/vim-capnp'
" Ansible, including .j2 Jinja template support
Plug 'pearofducks/ansible-vim'
" Jenkinsfile, adds some nice bits on top of groovy
Plug 'martinda/Jenkinsfile-vim-syntax'
" Helm syntax
Plug 'towolf/vim-helm'

" Initialize plugin system
call plug#end()

""" General Vim Configurations

" syntax highlighting
syntax enable
colorscheme monokai
" show line numbers
set number
" show line,column in status bar
set statusline+=%f\ %l\:%c
" allow buffers with unsaved changes
set hidden
" I proclaim it to be incorrect to put two spaces after a sentence
" ref: https://stackoverflow.com/a/4760477/2528719
set nojoinspaces
" Why fold when you have search?
set nofoldenable
" always keep open the sign column for consistency
set signcolumn=yes

" color customizations, less garish tab line
hi TabLineFill ctermfg=243 ctermbg=235 guifg=#8F908A guibg=#2D2E27
hi TabLine ctermfg=243 ctermbg=235 guifg=#8F908A guibg=#2D2E27
" hi TabLineSel ctermfg=Red ctermbg=Yellow

" Edit this config file
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" toggle mouse mode
nnoremap <leader>m <Esc>:call ToggleMouse()<CR>

" hidden characters
nmap <leader>l :set list!<CR>

" Copy and paste using system clipboard
vnoremap <C-c> "*y

" Trigger autoread on focus change
au FocusGained,BufEnter * :silent! !

""" General Plugin Configurations

" fzf shortcuts
noremap <c-x> :Files<CR>
vnoremap <c-x> <Esc>:Files<CR>
inoremap <c-x> <Esc>:Files<CR>
noremap <c-b> :Buffers<CR>
vnoremap <c-b> <Esc>:Buffers<CR>
inoremap <c-b> <Esc>:Buffers<CR>

" Setup incsearch
" https://github.com/haya14busa/incsearch.vim#basic-usage
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

"" COC
" extensions: https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions#implemented-coc-extensions
" - https://github.com/neoclide/coc-json
" - https://github.com/neoclide/coc-git
" - https://github.com/josa42/coc-go
" - https://github.com/neoclide/coc-rls
" - https://github.com/pappasam/coc-jedi
" - https://github.com/neoclide/coc-tsserver
" - https://github.com/amiralies/coc-flow
" - https://github.com/neoclide/coc-prettier
" - https://github.com/neoclide/coc-eslint
" - https://github.com/iamcco/coc-diagnostic
let g:coc_global_extensions = [
\ 'coc-json',
\ 'coc-git',
\ 'coc-go',
\ 'coc-rls',
\ 'coc-jedi',
\ 'coc-tsserver',
\ 'coc-flow',
\ 'coc-prettier',
\ 'coc-eslint',
\ 'coc-diagnostic',
\]
" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

"" Airline
" Display status line on top, so that it is not clipped with vertical panes.
" https://vi.stackexchange.com/a/27347/19472
let g:airline#extensions#tabline#enabled = 1
let g:airline_statusline_ontop = 1

"" NERDTree
" auto-close vim when NERDTree is the last one standing
" https://github.com/scrooloose/nerdtree/issues/21#issuecomment-157212312
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" command to refresh NERDTree
" TODO: make this automatic
nmap <Leader>r :NERDTreeFocus<cr>R<c-w><c-p>
" Ignore certain files
let NERDTreeIgnore = ['\.pyc$']
" Commenting the right way, proper alignment instead of following the code
let g:NERDDefaultAlign = 'left'
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

""" Homebrew
" Brewfiles https://thoughtbot.com/blog/brewfile-a-gemfile-but-for-homebrew
autocmd BufEnter Brewfile :setlocal filetype=ruby

""" Language-Specific Customizations

" Go customizations
" Use gopls for everything
let g:go_fmt_command = 'gopls'
let g:go_imports_mode = 'gopls'
" Go template formatting for Helm template files.
au BufRead,BufNewFile *.tpl set filetype=gohtmltmpl
" works more reliably, but slower
" let g:go_def_mode = 'godef'

" Rust customization
let g:rustfmt_autosave = 1
if has('macunix')
  let g:rust_clip_command = 'pbcopy'
endif

" Disable rope because is is horrendously slow with big projects
let g:pymode_rope = 0
let g:pymode_rope_autoimport = 0
let g:pymode_rope_lookup_project = 0

" JS customizations
let g:javascript_plugin_flow = 1

" Python customizations
let g:pymode_folding = 0
" adhere to current line length choices
let g:black_linelength = 80

" Markdown customizations
" See ~/.vim/after/syntax/markdown.vim for more customizations on this type.
" Spellchecking enabled. zg in normal mode to add words, :help spell for info
autocmd FileType markdown setlocal spell
" from: https://github.com/tpope/vim-markdown/blob/master/README.markdown
let g:markdown_fenced_languages = [
\ 'html',
\ 'go',
\ 'python',
\ 'c',
\ 'rust',
\ 'bash=sh',
\]
" Specify line width
au BufRead,BufNewFile *.md setlocal textwidth=80
" Previews on mac, from: https://stackoverflow.com/a/9214538/2528719
function! s:setupMarkup()
  nnoremap <leader>p :silent !open -a 'Marked 2.app' '%:p'<cr>
endfunction
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" Docker
autocmd BufRead,BufNewFile Dockerfile* set filetype=dockerfile

" Bazel
" Based on: https://github.com/w0rp/ale/blob/master/autoload/ale/fixers/goimports.vim#L7:22
" TODO: Configure this for coc.nvim
function! BuildifierFix(buffer) abort
  return {
  \ 'command': 'buildifier -showlog -mode=fix %t',
  \ 'read_temporary_file': 1,
  \}
endfunction

" markdown line width
au BufRead,BufNewFile *.md setlocal textwidth=80

" Terraform
let g:terraform_fmt_on_save=1

""" Custom Commands

" Base64 decode current selection
" from: https://stackoverflow.com/a/7849399
vnoremap <leader>64 y:let @"=system('base64 --decode', @")<cr>gvP
" JQ format current selection
" from: https://stackoverflow.com/a/7849399
vnoremap <leader>jq y:let @"=system('jq', @")<cr>gvP

" Use ripgrep for fzf, showing hidden files, ignoring git directories.
let $FZF_DEFAULT_COMMAND = "rg --files --hidden --glob '!.git/*'"

" Ripgrep support using fzf
" https://github.com/junegunn/fzf.vim#advanced-customization

" Utility function for calling RipGrep with parameters. Supports similar
" functionality to the :Ag command which exists by default.
function! RipGrepRaw(option, args, bang)
  call fzf#vim#grep(
    \ join(['rg', '--column', '--line-number', '--no-heading', '--color=always',
    \       '--hidden', '--glob', shellescape('!.git/*'),
    \       a:option, a:args], ' '),
    \ 1, fzf#vim#with_preview(), a:bang)
endfunction
function! RipGrep(option, args, bang)
  call RipGrepRaw(a:option, shellescape(a:args), a:bang)
endfunction

" Specific commands for RipGrep with FZF
command! -bang -nargs=* Rg
  \ call RipGrep('--smart-case', <q-args>, <bang>0)
command! -bang -nargs=* Rgc
  \ call RipGrep('--case-sensitive', <q-args>, <bang>0)
command! -bang -nargs=* Rga
  \ call RipGrep('--no-ignore', <q-args>, <bang>0)
command! -bang -nargs=* Rgf
  \ call RipGrep('--fixed-strings', <q-args>, <bang>0)
command! -bang -nargs=* Rgr
  \ call RipGrepRaw('', <q-args>, <bang>0)

" Copy search matches to clipboard
" http://vim.wikia.com/wiki/Copy_search_matches
function! CopyMatches(reg)
  let hits = []
  %s//\=len(add(hits, submatch(0))) ? submatch(0) : ''/gne
  let reg = empty(a:reg) ? '+' : a:reg
  execute 'let @'.reg.' = join(hits, "\n") . "\n"'
endfunction
command! -register CopyMatches call CopyMatches(<q-reg>)

" Toggle mouse mode
" ref: https://unix.stackexchange.com/a/156713
function! ToggleMouse()
  " check if mouse is enabled
  if &mouse == 'a'
    " disable mouse
    set mouse=
  else
    " enable mouse everywhere
    set mouse=a
  endif
endfunc
